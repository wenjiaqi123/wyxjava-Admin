<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gsm.dao.CourseDao">

    <resultMap id="selectCourseListMap" type="CourseDo">
        <id property="id" column="id"/>
        <result property="courseName" column="courseName"/>
        <result property="subjectId" column="subjectId"/>
        <result property="showOrder" column="showOrder"/>
        <result property="status" column="status"/>

        <association property="courseDetailsDo" javaType="com.gsm.pojo.database.CourseDetailsDo">
            <id property="id" column="courseDetailsId"/>
            <result property="courseId" column="courseId"/>
            <result property="courseTime" column="courseTime"/>
            <result property="courseSize" column="courseSize"/>
            <result property="courseScore" column="courseScore"/>
            <result property="status" column="courseDetailsStatus"/>
        </association>
    </resultMap>
    <!--查询课程列表-->
    <select id="selectCourseList" parameterType="CourseVo" resultMap="selectCourseListMap">
        select t.id as id,
        t.course_name as courseName,
        t.subject_id as subjectId,
        t.show_order as showOrder,
        t.status as status,
        t1.id as courseDetailsId,
        t1.course_id as courseId,
        t1.course_time as courseTime,
        t1.course_size as courseSize,
        t1.course_score as courseScore,
        t1.status as courseDetailsStatus
        from course t
        left join course_details t1 on t.id = t1.course_id
        <where>
            t.subject_id = #{subjectId}
            <if test="status != -1">
                and t.status = ${status}
            </if>
        </where>
        <if test="status != -1">
            order by t.show_order asc
        </if>
        <if test="status == -1">
            order by t.status desc,t.show_order asc
        </if>
    </select>

    <!--修改课程状态-->
    <update id="updateCourseStatus" parameterType="CourseVo">
        update course
        set status = #{status}
        where id = #{id}
    </update>


    <select id="selectCourseDataList" parameterType="CourseDataVo" resultType="CourseDataDo">
        select t.id,
               t.course_id,
               t.data_name,
               t.data_url,
               t.show_order,
               t.status
        from course_data t
        where t.course_id = #{courseId}
        order by t.show_order asc
    </select>

    <select id="selectCourseDetails" parameterType="CourseDetailsVo" resultType="CourseDetailsDo">
        select t.id,
               t.course_id,
               t.course_url,
               t.course_time,
               t.course_size,
               t.course_score,
               t.status
        from course_details t
        where t.course_id = #{courseId}
    </select>


    <update id="updateCourseDetails" parameterType="CourseDataVo">
        update course_details
        set course_url = #{courseUrl},
            course_score = #{courseScore}
        where course_id = #{courseId}
    </update>

    <delete id="deleteCourseDataListByCourseId" parameterType="Long">
      delete from course_data
      where course_id = #{courseId}
    </delete>
    <insert id="insertCourseDataList" parameterType="CourseDataVo">
        insert into course_data
        (course_id,
        data_name,
        data_url,
        show_order,
        status)
        values
        <foreach collection="list" item="i" index="index" separator=",">
            (#{i.courseId},
            #{i.dataName},
            #{i.dataUrl},
            #{i.showOrder},
            1)
        </foreach>
    </insert>

    <insert id="insertCourseBySubjectId" parameterType="CourseVo" keyProperty="id" useGeneratedKeys="true">
        <selectKey resultType="Long" keyProperty="id" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
        insert into course
        (course_name,
        subject_id,
        show_order,
        status)
        select
        #{courseName},
        #{subjectId},
        (select ifnull((select max(show_order) from course where subject_id = #{subjectId}), 0) + 1),
        1
    </insert>

    <insert id="insertCourseDetailsByCourseId" parameterType="CourseDetailsVo">
        insert into course_details
        (course_id,
        course_url,
        course_time,
        course_size,
        course_score,
        status)
        values
        (#{courseId},
        #{courseUrl},
        #{courseTime},
        #{courseSize},
        #{courseScore},
        1)
    </insert>

    <insert id="insertCourseDataByCourseId" parameterType="CourseDataVo">
        insert into course_data
        (course_id,
        data_name,
        data_url,
        show_order,
        status)
        values
        <foreach collection="list" item="i" index="index" separator=",">
            (#{i.courseId},
            #{i.dataName},
            #{i.dataUrl},
            #{i.showOrder},
            1)
        </foreach>
    </insert>
</mapper>